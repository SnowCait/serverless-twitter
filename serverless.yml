org: snowcait
app: serverless-twitter
service: serverless-twitter

frameworkVersion: '3'

provider:
  name: aws
  region: ap-northeast-1
  runtime: nodejs16.x
  memorySize: 128
  architecture: arm64
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - '*'

functions:
  hello:
    handler: handler.hello
    events:
      - httpApi:
          method: GET
          path: /hello
          cors:
            allowedOrigins:
              - http://localhost
            allowedHeaders:
              - Contet-Type
              - Authorization
            allowedMethods:
              - GET
      - httpApi:
          method: POST
          path: /hello
          cors: true
  auth:
    handler: handler.auth
    events:
      - httpApi:
          method: POST
          path: /auth

# resources:
#   Resources:
#     # Cognito User Pool
#     CognitoUserPool:
#       Type: AWS::Cognito::UserPool
#       Properties:
#         UserPoolName: ${self:service}-CognitoUserPool-${sls:stage}
#         AutoVerifiedAttributes:
#           - email
#         UsernameAttributes:
#           - email
#         MfaConfiguration: OFF
#         EmailConfiguration:
#           EmailSendingAccount: COGNITO_DEFAULT
#     CognitoUserPoolClient:
#       Type: AWS::Cognito::UserPoolClient
#       Properties:
#         ClientName: ${self:service}-CognitoUserPoolClient-${sls:stage}
#         GenerateSecret: false
#         UserPoolId:
#           Ref: CognitoUserPool
#     # Cognito Identity Pool
#     CognitoUserIdentityPool:
#       Type: AWS::Cognito::IdentityPool
#       Properties:
#         AllowUnauthenticatedIdentities: false
#         CognitoIdentityProviders:
#           - ClientId:
#               Ref: CognitoUserPoolClient
#             ProviderName:
#               Fn::GetAtt: [ CognitoUserPool, ProviderName ]
#     CognitoUserIdentityPoolRoleAttachment:
#       Type: AWS::Cognito::IdentityPoolRoleAttachment
#       Properties:
#         IdentityPoolId:
#           Ref: CognitoUserIdentityPool
#         Roles:
#           authenticated:
#             Fn::GetAtt: [ CognitoUserAuthRole, Arn ]
#     # IAM Roles
#     CognitoUserAuthRole:
#       Type: AWS::IAM::Role
#       Properties:
#         Path: /
#         AssumeRolePolicyDocument:
#           Version: 2012-10-17
#           Statement:
#             - Effect: Allow
#               Principal:
#                 Federated: cognito-identity.amazonaws.com
#               Action:
#                 - sts:AssumeRoleWithWebIdentity
#               Condition:
#                 StringEquals:
#                   cognito-identity.amazonaws.com:aud:
#                     Ref: CognitoUserIdentityPool
#                 ForAnyValue:StringLike:
#                   cognito-identity.amazonaws.com:amr: authenticated
#           Policies:
#             - PolicyName: CognitoAuthorizedPolicy
#               PolicyDocument:
#                 Version: 2012-10-27
#                 Statement:
#                   - Effect: Allow
#                     Action:
#                       - mobileanalytics:PutEvents
#                       - cognito-sync:*
#                       - cognito-identity:*
#                     Resource:
#                       - '*'
#                   - Effect: Allow
#                     Action:
#                       - execute-api:Invoke
#                     Resource:
#                       - Ref: hello
