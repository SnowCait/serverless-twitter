org: snowcait
app: serverless-twitter
service: serverless-twitter

frameworkVersion: '3'
configValidationMode: warn

provider:
  name: aws
  region: ap-northeast-1
  runtime: nodejs18.x
  memorySize: 256
  architecture: arm64
  environment:
    NODE_OPTIONS: --experimental-fetch
    users_table:
      Ref: UsersTable
    tweets_table:
      Ref: TweetsTable
  httpApi:
    cors: true
    authorizers:
      twitterAuthorizer:
        type: request
        functionName: authorizer
        enableSimpleResponses: true
        resultTtlInSeconds: 3600
        identitySource:
          - $request.header.Authorization
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - '*'
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:Query
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
            - Fn::GetAtt: [ TweetsTable, Arn ]

functions:
  authorizer:
    handler: handlers/twitter.authorizer
  hello:
    handler: handlers/public.hello
    events:
      - httpApi:
          method: GET
          path: /hello
  auth:
    handler: handlers/twitter.auth
    events:
      - httpApi:
          method: POST
          path: /auth
  refresh:
    handler: handlers/twitter.refresh
    events:
      - httpApi:
          method: POST
          path: /refresh
          authorizer:
            name: twitterAuthorizer
  tweet:
    handler: handlers/twitter.tweet
    events:
      - httpApi:
          method: POST
          path: /tweet
          authorizer:
            name: twitterAuthorizer
  timeline:
    handler: handlers/twitter.timeline
    events:
      - httpApi:
          method: GET
          path: /timeline
          authorizer:
            name: twitterAuthorizer

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-users-${sls:stage}
        AttributeDefinitions:
          - AttributeName: twitterUserId
            AttributeType: S
        KeySchema:
          - AttributeName: twitterUserId
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    TweetsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-tweets-${sls:stage}
        AttributeDefinitions:
          - AttributeName: twitterUserId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: N
        KeySchema:
          - AttributeName: twitterUserId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
#     # Cognito User Pool
#     CognitoUserPool:
#       Type: AWS::Cognito::UserPool
#       Properties:
#         UserPoolName: ${self:service}-CognitoUserPool-${sls:stage}
#         AutoVerifiedAttributes:
#           - email
#         UsernameAttributes:
#           - email
#         MfaConfiguration: OFF
#         EmailConfiguration:
#           EmailSendingAccount: COGNITO_DEFAULT
#     CognitoUserPoolClient:
#       Type: AWS::Cognito::UserPoolClient
#       Properties:
#         ClientName: ${self:service}-CognitoUserPoolClient-${sls:stage}
#         GenerateSecret: false
#         UserPoolId:
#           Ref: CognitoUserPool
#     # Cognito Identity Pool
#     CognitoUserIdentityPool:
#       Type: AWS::Cognito::IdentityPool
#       Properties:
#         AllowUnauthenticatedIdentities: false
#         CognitoIdentityProviders:
#           - ClientId:
#               Ref: CognitoUserPoolClient
#             ProviderName:
#               Fn::GetAtt: [ CognitoUserPool, ProviderName ]
#     CognitoUserIdentityPoolRoleAttachment:
#       Type: AWS::Cognito::IdentityPoolRoleAttachment
#       Properties:
#         IdentityPoolId:
#           Ref: CognitoUserIdentityPool
#         Roles:
#           authenticated:
#             Fn::GetAtt: [ CognitoUserAuthRole, Arn ]
#     # IAM Roles
#     CognitoUserAuthRole:
#       Type: AWS::IAM::Role
#       Properties:
#         Path: /
#         AssumeRolePolicyDocument:
#           Version: 2012-10-17
#           Statement:
#             - Effect: Allow
#               Principal:
#                 Federated: cognito-identity.amazonaws.com
#               Action:
#                 - sts:AssumeRoleWithWebIdentity
#               Condition:
#                 StringEquals:
#                   cognito-identity.amazonaws.com:aud:
#                     Ref: CognitoUserIdentityPool
#                 ForAnyValue:StringLike:
#                   cognito-identity.amazonaws.com:amr: authenticated
#           Policies:
#             - PolicyName: CognitoAuthorizedPolicy
#               PolicyDocument:
#                 Version: 2012-10-27
#                 Statement:
#                   - Effect: Allow
#                     Action:
#                       - mobileanalytics:PutEvents
#                       - cognito-sync:*
#                       - cognito-identity:*
#                     Resource:
#                       - '*'
#                   - Effect: Allow
#                     Action:
#                       - execute-api:Invoke
#                     Resource:
#                       - Ref: hello
